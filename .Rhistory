#' @export
#part 1 Pythagorean Theorem
pyth4 <- function(sa, sb, sc){
if(is.null(sa) & is.null(sb) |
is.null(sa) & is.null(sc) |
is.null(sb) & is.null(sc) |
!is.null(sa) & !is.null(sb) & !is.null(sc)) {
return(message("please enter two values"))
}
if(!is.null(sa) & !is.null(sb)) {
return(sqrt(sa^2 + sb^2))
}
if(!is.null(sc) & !is.null(sa)) {
return(sqrt(sc^2 - sa^2))
}
if(!is.null(sc) & !is.null(sb)) {
return(sqrt(sc^2 - sb^2))
}
}
#part 2 trimmed mean
trmean <- function(x, s, l){
n <- length(x)
if(n<(s+l+1)) {stop( )}
mean(sort(x)[(s+1):(n-l)])
}
devtools::load_all(".")
devtools::load_all(".")
library(hw06)
#' @export
#part 1 Pythagorean Theorem
hw06_pyth4 <- function(sa, sb, sc){
if(is.null(sa) & is.null(sb) |
is.null(sa) & is.null(sc) |
is.null(sb) & is.null(sc) |
!is.null(sa) & !is.null(sb) & !is.null(sc)) {
return(message("please enter two values"))
}
if(!is.null(sa) & !is.null(sb)) {
return(sqrt(sa^2 + sb^2))
}
if(!is.null(sc) & !is.null(sa)) {
return(sqrt(sc^2 - sa^2))
}
if(!is.null(sc) & !is.null(sb)) {
return(sqrt(sc^2 - sb^2))
}
}
#' @export
#part 2 trimmed mean
hw06_trmean <- function(x, s, l){
n <- length(x)
if(n<(s+l+1)) {stop( )}
mean(sort(x)[(s+1):(n-l)])
}
#' @export
#part 2 trimmed mean
hw06_trmean <- function(x, s, l){
n <- length(x)
if(n<(s+l+1)) {stop( )}
mean(sort(x)[(s+1):(n-l)])
}
library(hw06)
document()
setwd("./hw06")
document()
devtools::document()
devtools::document("hw06")
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
#' hw06 pythagoream theorem and trim a mean
#' @param calculation pythagorean theorem and trim a mean
#' @return the third line of a triangle and a trimmed mean
#' @export
#part 1 Pythagorean Theorem
pyth4 <- function(sa, sb, sc){
if(is.null(sa) & is.null(sb) |
is.null(sa) & is.null(sc) |
is.null(sb) & is.null(sc) |
!is.null(sa) & !is.null(sb) & !is.null(sc)) {
return(message("please enter two values"))
}
if(!is.null(sa) & !is.null(sb)) {
return(sqrt(sa^2 + sb^2))
}
if(!is.null(sc) & !is.null(sa)) {
return(sqrt(sc^2 - sa^2))
}
if(!is.null(sc) & !is.null(sb)) {
return(sqrt(sc^2 - sb^2))
}
}
#part 2 trimmed mean
trmean <- function(x, s, l){
n <- length(x)
if(n<(s+l+1)) {stop( )}
mean(sort(x)[(s+1):(n-l)])
}
devtools::document()
devtools::load_all(".")
rm(list = c("pyth4", "trmean"))
devtools::load_all(".")
devtools::load_all(".")
library(hw06)
devtools::install_github()
devtools::install_github(bios524hw)
devtools::install_github(repo)
devtools::install_github(repo=bios524hw)
devtools::install_github("hw06", "github_bios524hw")
library(devtools)
devtools::install_github(bios524hw)
devtools::install_github(repo="bios524hw")
library(knitr)
opts_chunk$set(message=FALSE, warning=FALSE, eval=FALSE, echo=TRUE, fig.keep="none", cache=TRUE)
options(digits=3)
options(max.print=200)
.ex <- 1 # Track ex numbers w/ hidden var. Increment each ex: `r .ex``r .ex=.ex+1`
# See http://rpubs.com/turnersd/embedding-rmarkdown-chunk-into-rmarkdown
catn <- function(x="") cat("    ", x, "\n")
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
# read in the data from github
moma <- read_csv("https://raw.githubusercontent.com/MuseumofModernArt/collection/master/Artworks.csv")
# take a look at the summary
summary(moma)
# let's assume we want to look at number of works by year ...
# now do some dplyr magic to aggregate our data on year acquired
moma_by_year <-
moma %>%
filter(!is.na(DateAcquired)) %>%
mutate(year.acquired = year(DateAcquired)) %>%
group_by(year.acquired) %>%
summarise(nworks = n())
